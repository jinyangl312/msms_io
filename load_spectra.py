import tqdm
import os
import struct
import re
from pathlib import Path
import numpy as np


def pf2_loader(path_list):
    '''
    Return a generator for spectra from .pf2 binary file generated by pFind 3
    '''

    if not isinstance(path_list, list):        
        path_list = Path(path_list)
        assert path_list.is_dir()
        path_list = path_list.glob('*.mgf')
        

    for path in path_list:
        with open(path, "rb") as f:
            spec_title = os.path.basename(path)[:-10]
            nSpec, lenTitle = struct.unpack("2i", f.read(8))
            pf2title = struct.unpack("%ds" %lenTitle, f.read(lenTitle))
            
            #mpSpec = {}    
            for _ in tqdm.tqdm(range(nSpec)):
                scan_no, = struct.unpack("i",f.read(4))
                nPeak, = struct.unpack("i", f.read(4))
                peaks = []
                mz_int = struct.unpack(str(nPeak*2)+"d", f.read(nPeak*2*8))
                for i_peak in range(nPeak):
                    mz = mz_int[i_peak*2]
                    inten = mz_int[i_peak*2 + 1]
                    peaks.append( (mz, inten) )
                
                max_inten=0
                if len(peaks)!=0:
                    max_inten=max(peaks,key=lambda x:x[1])[1]
                
                nMix, = struct.unpack("i", f.read(4))
                nMaxCharge = 0
                for i_mix in range(nMix):
                    precursor, = struct.unpack("d", f.read(8))
                    nCharge, = struct.unpack("i", f.read(4))
                    if nCharge > nMaxCharge: nMaxCharge = nCharge
                    specname = f"{spec_title}.{scan_no}.{scan_no}.{nCharge}.{i_mix}.dta"
                    spec_info = (specname, nCharge, precursor, max_inten)
                    yield spec_info, peaks
    

def load_whole_pf2(path_list):
    '''
    Return a dict for all experimental spectra from .pf2 binary file
    generated by pFind 3
    '''

    mpSpec = {}
    for spec_info, peaks in pf2_loader(path_list):
        mpSpec[spec_info["TITLE"]] = (spec_info, peaks)
    return mpSpec

    
def mgf_loader(path_list, transform_peaks=True):
    '''
    Return a generator for experimental spectra from .mgf text file
    By default if @transform_peaks=True, mz and intensity arrays will be converted to float; otherwise they will be kept as a string.
    '''

    if not isinstance(path_list, list):        
        path_list = Path(path_list)
        assert path_list.is_dir()
        path_list = path_list.glob('*.mgf')

    for path in path_list:
        print(path)        
        with open(path, "r") as f:
            while True:
                # Go to the next "BEGIN IONS"
                line = f.readline()
                if not line: # EOF
                    break
                while not "BEGIN IONS" in line:
                    line = f.readline()
                    if not line: # EOF
                        break
                if not line:
                    break
                
                # Parse spec headers
                line = f.readline()
                spec_info = dict()
                while "=" in line:
                    line = re.split("=|\n", line)
                    spec_info[line[0]] = line[1]
                    line = f.readline()
                
                # Parse mz and intensity arrays
                if transform_peaks:
                    peaks = []
                    while not 'END IONS' in line:
                        line = re.split("\s|\n", line)
                        peaks.append( (float(line[0]), float(line[1])) )
                        line = f.readline()
                else:
                    peaks = ""
                    while not 'END IONS' in line:
                        peaks += line
                        line = f.readline()
                yield spec_info, peaks


def load_whole_mgf(path_list, transform_peaks=True):
    '''
    Return a dict for all experimental spectra from .mgf text file
    By default if @transform_peaks=True, mz and intensity arrays will be converted to float; otherwise they will be kept as a string.
    '''

    
    if os.path.exists(f"mgf_dict.npy"):
        return np.load(f"mgf_dict.npy").item()

    mpSpec = {}
    for spec_info, peaks in mgf_loader(path_list, transform_peaks):
        mpSpec[spec_info["TITLE"]] = (spec_info, peaks)
    np.save(f"mgf_dict.npy", mpSpec)
    return mpSpec


def ms1_loader_unit(path, transform_peaks=True):
    '''
    Return a generator from .ms1 text file
    By default if @transform_peaks=True, mz and intensity arrays will be
    converted to float; otherwise they will be kept as string.
    '''

    with open(path, "r") as f:
        while True:
            # Go to the next line starts with S
            line = f.readline()
            if not line: # EOF
                break
            while not line[0] == "S":
                line = f.readline()
                if not line: # EOF
                    break
            if not line:
                break
            
            # Parse headers
            spec_info = dict()
            spec_info["scan_no"] = re.split("\t|\n", line)[1]
            line = f.readline()
            while line[0] == "I":
                line = re.split("=|\n", line)
                spec_info[line[1]] = line[2]
                line = f.readline()
            
            # Parse mz and intensity arrays
            if transform_peaks:
                peaks = []
                for _ in range(spec_info["NumberOfPeaks"]):
                    line = re.split("\s|\n", line)
                    peaks.append( (float(line[0]), float(line[1])) )
                    line = f.readline()
            else:
                peaks = ""
                for _ in range(spec_info["NumberOfPeaks"]):
                    peaks += line
                    line = f.readline()
            yield spec_info, peaks


def load_whole_ms1_unit(path, transform_peaks=True):
    '''
    Return a dict for all experimental spectra from .mgf text file
    By default if @transform_peaks=True, mz and intensity arrays will be converted to float; otherwise they will be kept as a string.
    '''

    if os.path.exists(f"{path}.npy"):
        return np.load(f"{path}.npy").item()

    mpSpec = {}
    for spec_info, peaks in ms1_loader_unit(path, transform_peaks):
        mpSpec[spec_info["scan_no"]] = (spec_info, peaks)
    np.save(f"{path}.npy", mpSpec)
    return mpSpec


def get_mgf_titles(path_list):
    '''
    Return a list of all titles contained in mgf.
    Can be used to calculate identification rate.
    '''
    
    if os.path.exists(f"mgf_titles.npy"):
        return np.load(f"mgf_titles.npy").item()
    
    loader = mgf_loader(path_list, transform_peaks=False)
    res = [x[0]["TITLE"] for x in loader]
    np.save(f"mgf_titles.npy", res)
    return res


def get_mgf_headers(path_list):
    '''
    Return a list of all headers contained in mgf.
    Can be used to check precursor evidence for results.
    '''
    
    if os.path.exists(f"mgf_headers.npy"):
        return np.load(f"mgf_headers.npy").item()
    
    loader = mgf_loader(path_list, transform_peaks=False)
    res =  [x[0] for x in loader]
    np.save(f"mgf_headers.npy", res)
    return res
